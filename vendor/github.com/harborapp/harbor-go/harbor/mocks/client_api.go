package mocks

import "github.com/harborapp/harbor-go/harbor"
import "github.com/stretchr/testify/mock"

// ClientAPI is an autogenerated mock type for the ClientAPI type
type ClientAPI struct {
	mock.Mock
}

// ProfileGet provides a mock function with given fields:
func (_m *ClientAPI) ProfileGet() (*harbor.Profile, error) {
	ret := _m.Called()

	var r0 *harbor.Profile
	if rf, ok := ret.Get(0).(func() *harbor.Profile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfilePatch provides a mock function with given fields: _a0
func (_m *ClientAPI) ProfilePatch(_a0 *harbor.Profile) (*harbor.Profile, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.Profile
	if rf, ok := ret.Get(0).(func(*harbor.Profile) *harbor.Profile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*harbor.Profile) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileToken provides a mock function with given fields:
func (_m *ClientAPI) ProfileToken() (*harbor.Token, error) {
	ret := _m.Called()

	var r0 *harbor.Token
	if rf, ok := ret.Get(0).(func() *harbor.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamGet provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamGet(_a0 string) (*harbor.Team, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.Team
	if rf, ok := ret.Get(0).(func(string) *harbor.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamList provides a mock function with given fields:
func (_m *ClientAPI) TeamList() ([]*harbor.Team, error) {
	ret := _m.Called()

	var r0 []*harbor.Team
	if rf, ok := ret.Get(0).(func() []*harbor.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*harbor.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPatch(_a0 *harbor.Team) (*harbor.Team, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.Team
	if rf, ok := ret.Get(0).(func(*harbor.Team) *harbor.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*harbor.Team) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamPost provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPost(_a0 *harbor.Team) (*harbor.Team, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.Team
	if rf, ok := ret.Get(0).(func(*harbor.Team) *harbor.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*harbor.Team) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamUserAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserAppend(_a0 harbor.TeamUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(harbor.TeamUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamUserDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserDelete(_a0 harbor.TeamUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(harbor.TeamUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamUserList provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserList(_a0 harbor.TeamUserParams) ([]*harbor.User, error) {
	ret := _m.Called(_a0)

	var r0 []*harbor.User
	if rf, ok := ret.Get(0).(func(harbor.TeamUserParams) []*harbor.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*harbor.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(harbor.TeamUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) UserDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGet provides a mock function with given fields: _a0
func (_m *ClientAPI) UserGet(_a0 string) (*harbor.User, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.User
	if rf, ok := ret.Get(0).(func(string) *harbor.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields:
func (_m *ClientAPI) UserList() ([]*harbor.User, error) {
	ret := _m.Called()

	var r0 []*harbor.User
	if rf, ok := ret.Get(0).(func() []*harbor.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*harbor.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPatch(_a0 *harbor.User) (*harbor.User, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.User
	if rf, ok := ret.Get(0).(func(*harbor.User) *harbor.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*harbor.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPost provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPost(_a0 *harbor.User) (*harbor.User, error) {
	ret := _m.Called(_a0)

	var r0 *harbor.User
	if rf, ok := ret.Get(0).(func(*harbor.User) *harbor.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*harbor.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*harbor.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTeamAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamAppend(_a0 harbor.UserTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(harbor.UserTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTeamDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamDelete(_a0 harbor.UserTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(harbor.UserTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTeamList provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamList(_a0 harbor.UserTeamParams) ([]*harbor.Team, error) {
	ret := _m.Called(_a0)

	var r0 []*harbor.Team
	if rf, ok := ret.Get(0).(func(harbor.UserTeamParams) []*harbor.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*harbor.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(harbor.UserTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
